{"version":3,"sources":["components/Container/Container.styles.jsx","components/Container/Container.jsx","components/ContactForm/ContactForm.styles.jsx","components/Filter/Filter.styles.jsx","components/Filter/Filter.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styles.jsx","components/ContactList/ContactList.jsx","App.jsx","index.js"],"names":["Title","Containers","Container","title","children","Label","Input","ButtonAdd","Span","Text","Filter","value","onChange","type","name","placeholder","pattern","required","ContactForm","state","number","nameInputId","uuidv4","numberInputId","handleChange","e","currentTarget","setState","handleSubmit","preventDefault","props","onSubmit","reset","this","htmlFor","id","disabled","Component","Contact","ContactItem","ButtonDelete","ContactList","contacts","onDeleteContact","map","onClick","App","filter","formSubmitHandler","usher","some","contact","alert","prevState","changeFilterInput","onFilteredContacts","toLowerCase","includes","DeleteContact","contactId","localStorage","getItem","parsedContacts","JSON","parse","prevProps","setItem","stringify","filteredContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0580382c.chunk.js","sourcesContent":["import styled from '@emotion/styled/macro';\r\n\r\n\r\nexport const Title = styled.h1`\r\n   text-align: center;\r\n    color: #000;\r\n    font-weight: bold;\r\n    font-size: 40px;\r\n`;\r\nexport const Containers = styled.div`\r\n width: 400px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  padding: 20px 40px;\r\n\r\n  background-color: rgb(47, 154, 255);\r\n  box-shadow: 1px 1px 3px rgba(0,0,0,0.5);\r\n  border-radius: 5px;\r\n  &:hover{\r\n      box-shadow: 0px 0px 5px  rgba(0,0,0,0.5);\r\n`","import PropTypes from \"prop-types\";\r\nimport { Title, Containers } from \"./Container.styles\";\r\n\r\nexport default function Container ({ title, children }) {\r\n    return (\r\n        <Containers>\r\n            <Title>{title}</Title>\r\n            {children}\r\n      </Containers>\r\n    )\r\n};\r\nContainer.propTypes = {\r\n    title: PropTypes.string,\r\n};","import styled from '@emotion/styled/macro';\r\n\r\nexport const Label = styled.label`\r\nfont-size:18px;\r\nfont-weight:600;\r\njustify-content:center;\r\npadding-bottom: 15px;\r\nmargin:0;\r\n`\r\n\r\nexport const Input = styled.input`\r\n  display: flex;\r\n  padding: 6px;\r\n  margin-bottom: 20px;\r\n  border-radius:5px;\r\n  min-width: 300px;\r\n  cursor: pointer;\r\n  box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px,\r\n    rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset;\r\n\r\n    &:focus{\r\n        border: 2px solid #eee;\r\n        outline: none;\r\n    }\r\n`\r\nexport const ButtonAdd = styled.button`\r\n  background-color: #fff;\r\n  outline: none;\r\n  padding: 6px 8px;\r\n  font-size: 12px;\r\n  line-height: 12px;\r\n  text-transform: uppercase;\r\n  cursor: pointer;\r\n   border-radius:5px;\r\n   border: 1px solid black;\r\n   &:hover {\r\n    box-shadow: 0 0 20px rgba(50, 50, 93, 0.25);\r\n    background: blue;\r\n  }\r\n  `\r\nexport const Span = styled.span`\r\n font-size: 20px;\r\n  font-weight: 400;\r\n  margin-bottom: 7px;\r\n  `","import styled from \"@emotion/styled/macro\";\r\n\r\nexport const Text = styled.p`\r\nfont-size:18px;\r\n`","\r\nimport PropTypes from 'prop-types';\r\nimport { Input } from '../ContactForm/ContactForm.styles';\r\nimport { Text } from './Filter.styles';\r\n\r\n\r\nexport default function Filter({ value, onChange }) {\r\n    return (\r\n        <>\r\n            <Text>Find contact by name</Text>\r\n               <Input\r\n                        type=\"text\"\r\n                         name=\"name\"\r\n                        placeholder= \"Name to search\"\r\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                onChange={onChange}\r\n                value={value}\r\n                    required>\r\n                </Input>\r\n        </>\r\n    )\r\n}\r\nFilter.propTypes = {\r\n    value: PropTypes.string,\r\n    onChange: PropTypes.func.isRequired,\r\n};","import {Component} from \"react\";\r\nimport { Label, Input, ButtonAdd, Span } from './ContactForm.styles'\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport default class ContactForm extends Component {\r\n    state = {\r\n        name: '',\r\n        number: '',\r\n    };\r\n    nameInputId = uuidv4();\r\n    numberInputId = uuidv4();\r\n\r\n    handleChange = (e) => {\r\n        const { name, value } = e.currentTarget;\r\n        this.setState({ [name]: value });\r\n    };\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.onSubmit(this.state);\r\n        this.reset();\r\n    };\r\n\r\n    reset = () => {\r\n        this.setState({\r\n            name: '',\r\n            number: '',\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { name, number } = this.state;\r\n    return (\r\n       \r\n            <form onSubmit={this.handleSubmit}>\r\n            <Label>\r\n                <Span htmlFor={this.numberInputId}>Name</Span>\r\n                    <Input\r\n                        type=\"text\"\r\n                         name=\"name\"\r\n                        placeholder= \"Enter name\"\r\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                        required\r\n                       onChange={this.handleChange}\r\n                        id={this.nameInputId}\r\n                        value={name}\r\n                    />\r\n            </Label>\r\n        \r\n            <Label>\r\n                <Span htmlFor={this.numberInputId}>Number</Span>\r\n                 <Input\r\n                  type=\"tel\"\r\n                    name=\"number\"\r\n                    placeholder=\"Enter number\"\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                    onChange={this.handleChange}\r\n                    value={number}\r\n                    id={this.nameInputId}\r\n                />\r\n                </Label>\r\n               \r\n               <ButtonAdd\r\n                    type=\"submit\"\r\n                    disabled={!name|| !number} >Add contact</ButtonAdd>\r\n              </form>\r\n        )\r\n        }\r\n}","import styled from '@emotion/styled/macro';\r\n\r\n\r\n\r\nexport const Contact = styled.ul`\r\nwidth: 300px;\r\npadding: 0;\r\n`\r\n\r\nexport const ContactItem = styled.li`\r\ndisplay:flex;\r\ntext-align:center;\r\nalign-items: center;\r\njustify-content: space-around;\r\n`\r\nexport const Text = styled.p`\r\nfont-size:18px;\r\nfont-weight: 500;\r\n`\r\nexport const ButtonDelete = styled.button`\r\nbackground-color: #fff;\r\ncursor: pointer;\r\n  border-radius:5px;\r\n  border: 1px solid black;\r\n  cursor: pointer;\r\n  &:hover {\r\n    box-shadow: 0 0 20px rgba(50, 50, 93, 0.25);\r\n    background: blue;\r\n  }\r\n`","import PropTypes from 'prop-types';\r\nimport { Contact, ContactItem, ButtonDelete, Text } from './ContactList.styles'\r\n\r\n export default function ContactList ({ contacts, onDeleteContact }) {\r\n    return(\r\n        <Contact>\r\n            {contacts.map(({ id, name, number }) => (\r\n                <ContactItem key={id}><Text>{name}:{number}</Text>\r\n            <ButtonDelete onClick={()=>onDeleteContact(id)}>Delete</ButtonDelete>\r\n            </ContactItem>\r\n        ))}\r\n        </Contact>\r\n    )\r\n}\r\nContactList.propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            number: PropTypes.string.isRequired,\r\n        })\r\n    ).isRequired,\r\n    onDeleteContact: PropTypes.func.isRequired, \r\n}\r\n","import React, { Component } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport contacts from './components/Data/contacts.json';\nimport Container from './components/Container/Container';\nimport Filter from './components/Filter/Filter.jsx';\nimport ContactForm from './components/ContactForm/ContactForm.jsx'\nimport ContactList from './components/ContactList/ContactList'\n\n\n\n\nexport default class App extends Component{\n  state = {\n    contacts: contacts,\n    filter: '',\n  };\n\n  formSubmitHandler = ({ name, number }) => {\n    const { contacts } = this.state;\n    const usher = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n    if (contacts.some((contact) => contact.name === name)) {\n      alert(`${name} is already in the contacts.`);\n      return;\n    }\n    this.setState((prevState) => ({\n      ...prevState,\n      contacts: [usher, ...prevState.contacts],\n    }));\n  };\n\n  changeFilterInput = (e) => {\n    this.setState({ filter: e.currentTarget.value });\n  };\n  onFilteredContacts = () => {\n    const { filter, contacts } = this.state;\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n  DeleteContact = (contactId) => {\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter(\n        (contact) => contact.id !== contactId\n      ),\n    }));\n  };\n  componentDidMount() {\n   \n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n  componentDidUpdate(prevProps, prevState) {\n  \n\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n  render() {\n    const { filter } = this.state;\n    const filteredContacts = this.onFilteredContacts();\n    return (\n      <Container title=\"Phonebook\">\n        <ContactForm onSubmit={this.formSubmitHandler} />\n        <h2>Contacts</h2>\n        <Filter value={filter} onChange={this.changeFilterInput} />\n        <ContactList\n          contacts={filteredContacts}\n          onDeleteContact={this.DeleteContact}\n        />\n      </Container>\n    );\n  }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}